version: '3'

services:    
  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    restart: always
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer:/data"
    env_file: portainer.env
    environment:
     - VIRTUAL_HOST=docker.${DOMAIN}
     - VIRTUAL_PORT=9000
     - LETSENCRYPT_HOST=docker.${DOMAIN}
     - LETSENCRYPT_EMAIL=${EMAIL}
  
  smtp:
    image: turgon37/smtp-relay:latest
    container_name: smtp
    restart: always
    ports:
     - "25:25"
    volumes:
    - "smtp:/data"
    env_file: smtp.env
    environment:
      - RELAY_POSTMASTER=noreply@${DOMAIN}
      - RELAY_MYHOSTNAME=smtp.${DOMAIN}
      - RELAY_MYDOMAIN=${DOMAIN}

  postgres:
    container_name: postgres
    image: postgres
    env_file: postgres.env
    volumes:
       - postgres:/data/postgres
    expose:
      - 5432
    restart: always
  
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    env_file: postgres.env
    volumes:
       - pgadmin:/root/.pgadmin
    restart: always
    environment:
     - VIRTUAL_HOST=postgres.${DOMAIN}
     - VIRTUAL_PORT=5050
     - LETSENCRYPT_HOST=postgres.${DOMAIN}
     - LETSENCRYPT_EMAIL=${EMAIL}


  registry:
    image: registry:2
    container_name: registry
    expose:
      - 5000
    volumes:
      - "registry:/var/lib/registry"
      - "ssl:/etc/nginx/certs:ro"
      - "./registry.htpasswd:/auth/.htpasswd"
      - "./registry.yml:/etc/docker/registry/config.yml"
    restart: always
    env_file: registry.env
    environment:
      - VIRTUAL_HOST=registry.${DOMAIN}
      - VIRTUAL_PORT=5000
      - LETSENCRYPT_HOST=registry.${DOMAIN}
      - LETSENCRYPT_EMAIL=${EMAIL}

  registry-ui:
    image: joxit/docker-registry-ui:latest
    container_name: registry-ui
    expose:
      - 80
    depends_on:
      - registry
    env_file: registry.env
    environment:
      - VIRTUAL_HOST=ui.registry.${DOMAIN}
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=ui.registry.${DOMAIN}
      - LETSENCRYPT_EMAIL=${EMAIL}

  drone-server:
    image: drone/drone:1
    container_name: drone-server
    expose:
      - 8000
      - 9000
    volumes:
      - "drone:/var/lib/drone"
    restart: always
    env_file: drone.env
    environment:
      - DRONE_RPC_HOST=ci.${DOMAIN}
      - DRONE_RPC_PROTO=https
      - VIRTUAL_HOST=ci.${DOMAIN}
      - VIRTUAL_PORT=8000
      - LETSENCRYPT_HOST=ci.${DOMAIN}
      - LETSENCRYPT_EMAIL=${EMAIL}

  drone-agent:
    image: drone/agent:1
    container_name: drone-agent
    restart: always
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file: drone.env
    environment:
      - DRONE_SERVER_HOST=ci.${DOMAIN}
      - DRONE_SERVER_PROTO=https

  cadvisor:
    image: vimagick/cadvisor
    container_name: cadvisor
    expose:
      - 8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: always
    env_file: cadvisor.env
    environment:
      - VIRTUAL_HOST=monitor.${DOMAIN}
      - VIRTUAL_PORT=8080
      - LETSENCRYPT_HOST=monitor.${DOMAIN}
      - LETSENCRYPT_EMAIL=${EMAIL}
   
  watchtower:
    image: v2tec/watchtower
    container_name: watchtower
    command: --debug
    env_file: watchtower.env
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart: always
    
volumes:
  portainer:
  registry:
  drone:
  postgres:
  pgadmin:

networks:
  default:
    external:
      name: nginx-proxy
